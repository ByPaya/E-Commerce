package com.platfrom.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.amqp.RabbitConnectionDetails.Address;
import org.springframework.stereotype.Service;

import com.platfrom.model.CartItem;
import com.platfrom.model.Order;
import com.platfrom.model.OrderItem;
import com.platfrom.model.Product;
import com.platfrom.model.UserAddress;
import com.platfrom.repository.CartRepository;
import com.platfrom.repository.OrderRepository;
import com.platfrom.repository.ProductRepository;

@Service

public class OrderService {

	@Autowired
    private  OrderRepository orderRepo;
	
	@Autowired
    private  ProductRepository productRepo;
	
	@Autowired
    private  CartRepository cartRepo;

    public Order placeOrder(Long userId, Address address) {
        List<CartItem> cartItems = cartRepo.findByUserId(userId);

        if (cartItems.isEmpty()) throw new RuntimeException("Cart is empty");

        double total = 0.0;
        List<OrderItem> orderItems = new ArrayList<OrderItem>();

        Order order = new Order();
        order.setUser(cartItems.get(0).getUser());
        order.setOrderDate(LocalDateTime.now());
        order.setDeliveryStatus("UNPLACED");
        order.setPaymentStatus("PAID");
        order.setDeliveryAddress(UserAddress);

        for (CartItem cart : cartItems) {
            Product p = cart.getProduct();

            OrderItem oi = new OrderItem();
            oi.setOrder(order);
            oi.setProduct(p);
            oi.setPrice(p.getPrice());
            
            oi.setQuantity(cart.getQuantity());
            orderItems.add(oi);

            total += p.getPrice() * cart.getQuantity();
        }

        order.setItems(orderItems);
        order.setTotalAmount(total);

        cartRepo.deleteAll(cartItems); // clear cart after placing order

        return orderRepo.save(order);
    }

    public List<Order> getUserOrders(Long userId) {
        return orderRepo.findByUserId(userId);
    }
}
